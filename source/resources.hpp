/*

Copyright (c) 2024 Alexander Brandt

This Source Code Form is subject to the terms of the Mozilla Public
License, v. 2.0. If a copy of the MPL was not distributed with this
file, You can obtain one at https://mozilla.org/MPL/2.0/.

This Source Code Form is "Incompatible With Secondary Licenses", as
defined by the Mozilla Public License, v. 2.0.
*/

#ifndef RESOURCES_HPP
#define RESOURCES_HPP

#include <stddef.h>
#include <stdint.h>


struct Character
{
	uint16_t data_index;
	uint8_t width : 4;
	uint8_t height : 4;
	uint8_t y : 4;
	uint8_t unused : 4;
};

struct Font
{
	size_t characters_length;
	size_t data_length;
	const Character* characters;
	const uint16_t* data;

	size_t line_height;
	size_t space_width;
	size_t tab_width;
};

struct Colour
{
	uint8_t r;
	uint8_t g;
	uint8_t b;
	uint8_t a;
};

struct Palette
{
	size_t length;
	const Colour* colours;
};


// ========


class Font95
{
  public:
	static constexpr size_t CHARACTERS_LENGTH = 128;
	static constexpr size_t DATA_LENGTH = 732;

	static constexpr size_t LINE_HEIGHT = 14;
	static constexpr size_t SPACE_WIDTH = 4;
	static constexpr size_t TAB_WIDTH = 16;

	static constexpr Character CHARACTERS[CHARACTERS_LENGTH] = {
	    {0, 0, 0, 0},   {0, 0, 0, 0},    {0, 0, 0, 0},   {0, 0, 0, 0},    {0, 0, 0, 0},     {0, 0, 0, 0},
	    {0, 0, 0, 0},   {0, 0, 0, 0},    {0, 0, 0, 0},   {0, 0, 0, 0},    {0, 0, 0, 0},     {0, 0, 0, 0},
	    {0, 0, 0, 0},   {0, 0, 0, 0},    {0, 0, 0, 0},   {0, 0, 0, 0},    {0, 0, 0, 0},     {0, 0, 0, 0},
	    {0, 0, 0, 0},   {0, 0, 0, 0},    {0, 0, 0, 0},   {0, 0, 0, 0},    {0, 0, 0, 0},     {0, 0, 0, 0},
	    {0, 0, 0, 0},   {0, 0, 0, 0},    {0, 0, 0, 0},   {0, 0, 0, 0},    {0, 0, 0, 0},     {0, 0, 0, 0},
	    {0, 0, 0, 0},   {0, 0, 0, 0},    {0, 0, 0, 0},   {0, 2, 9, 1},    {9, 4, 3, 1},     {12, 7, 9, 1},
	    {21, 6, 10, 0}, {31, 8, 9, 1},   {40, 6, 9, 1},  {49, 2, 3, 1},   {52, 3, 11, 0},   {63, 3, 11, 0},
	    {74, 4, 3, 1},  {77, 6, 5, 4},   {82, 3, 2, 9},  {84, 3, 1, 6},   {85, 2, 1, 9},    {86, 5, 8, 2},
	    {94, 6, 9, 1},  {103, 4, 9, 1},  {112, 6, 9, 1}, {121, 6, 9, 1},  {130, 6, 9, 1},   {139, 6, 9, 1},
	    {148, 6, 9, 1}, {157, 6, 9, 1},  {166, 6, 9, 1}, {175, 6, 9, 1},  {184, 2, 6, 4},   {190, 2, 7, 4},
	    {197, 5, 7, 3}, {204, 6, 3, 5},  {207, 5, 7, 3}, {214, 6, 9, 1},  {223, 11, 10, 0}, {233, 8, 9, 1},
	    {242, 6, 9, 1}, {251, 7, 9, 1},  {260, 7, 9, 1}, {269, 6, 9, 1},  {278, 6, 9, 1},   {287, 7, 9, 1},
	    {296, 7, 9, 1}, {305, 2, 9, 1},  {314, 5, 9, 1}, {323, 7, 9, 1},  {332, 6, 9, 1},   {341, 8, 9, 1},
	    {350, 7, 9, 1}, {359, 7, 9, 1},  {368, 7, 9, 1}, {377, 7, 9, 1},  {386, 7, 9, 1},   {395, 6, 9, 1},
	    {404, 6, 9, 1}, {413, 7, 9, 1},  {422, 8, 9, 1}, {431, 12, 9, 1}, {440, 8, 9, 1},   {449, 8, 9, 1},
	    {458, 8, 9, 1}, {467, 3, 12, 0}, {479, 5, 8, 2}, {487, 3, 12, 0}, {499, 6, 3, 0},   {502, 7, 1, 9},
	    {503, 3, 2, 1}, {505, 6, 6, 4},  {511, 6, 9, 1}, {520, 6, 6, 4},  {526, 6, 9, 1},   {535, 6, 6, 4},
	    {541, 3, 9, 1}, {550, 6, 8, 4},  {558, 6, 9, 1}, {567, 2, 9, 1},  {576, 2, 11, 1},  {587, 6, 9, 1},
	    {596, 2, 9, 1}, {605, 8, 6, 4},  {611, 6, 6, 4}, {617, 6, 6, 4},  {623, 6, 8, 4},   {631, 6, 8, 4},
	    {639, 3, 6, 4}, {645, 5, 6, 4},  {651, 3, 8, 2}, {659, 6, 6, 4},  {665, 6, 6, 4},   {671, 8, 6, 4},
	    {677, 5, 6, 4}, {683, 5, 8, 4},  {691, 5, 6, 4}, {697, 4, 12, 0}, {709, 2, 9, 1},   {718, 4, 12, 0},
	    {730, 7, 2, 6}, {0, 0, 0, 0},
	};

	static constexpr uint16_t DATA[DATA_LENGTH] = {
	    /* ! */ 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0x0002,
	    /* " */ 0x000A, 0x000A, 0x000A,
	    /* # */ 0x0024, 0x0024, 0x007E, 0x0024, 0x0024, 0x0024, 0x007E, 0x0024, 0x0024,
	    /* $ */ 0x0008, 0x001C, 0x002A, 0x000A, 0x000C, 0x0018, 0x0028, 0x002A, 0x001C, 0x0008,
	    /* % */ 0x000C, 0x0092, 0x004C, 0x0020, 0x0010, 0x0008, 0x0064, 0x0092, 0x0060,
	    /* & */ 0x0004, 0x000A, 0x000A, 0x0004, 0x0004, 0x002A, 0x0012, 0x0012, 0x002C,
	    /* ' */ 0x0002, 0x0002, 0x0002,
	    /* ( */ 0x0004, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0004,
	    /* ) */ 0x0002, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002,
	    /* * */ 0x000A, 0x0004, 0x000A,
	    /* + */ 0x0008, 0x0008, 0x003E, 0x0008, 0x0008,
	    /* , */ 0x0004, 0x0002,
	    /* - */ 0x0006,
	    /* . */ 0x0002,
	    /* / */ 0x0010, 0x0010, 0x0008, 0x0008, 0x0004, 0x0004, 0x0002, 0x0002,
	    /* 0 */ 0x001C, 0x0022, 0x0022, 0x0022, 0x0022, 0x0022, 0x0022, 0x0022, 0x001C,
	    /* 1 */ 0x0008, 0x000E, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
	    /* 2 */ 0x001C, 0x0022, 0x0020, 0x0020, 0x0010, 0x0008, 0x0004, 0x0002, 0x003E,
	    /* 3 */ 0x001C, 0x0022, 0x0020, 0x0020, 0x0018, 0x0020, 0x0020, 0x0022, 0x001C,
	    /* 4 */ 0x0010, 0x0018, 0x0018, 0x0014, 0x0014, 0x0012, 0x003E, 0x0010, 0x0010,
	    /* 5 */ 0x003E, 0x0002, 0x0002, 0x001E, 0x0022, 0x0020, 0x0020, 0x0022, 0x001C,
	    /* 6 */ 0x001C, 0x0022, 0x0002, 0x0002, 0x001E, 0x0022, 0x0022, 0x0022, 0x001C,
	    /* 7 */ 0x003E, 0x0020, 0x0010, 0x0010, 0x0008, 0x0008, 0x0004, 0x0004, 0x0004,
	    /* 8 */ 0x001C, 0x0022, 0x0022, 0x0022, 0x001C, 0x0022, 0x0022, 0x0022, 0x001C,
	    /* 9 */ 0x001C, 0x0022, 0x0022, 0x0022, 0x003C, 0x0020, 0x0020, 0x0022, 0x001C,
	    /* : */ 0x0002, 0x0000, 0x0000, 0x0000, 0x0000, 0x0002,
	    /* ; */ 0x0002, 0x0000, 0x0000, 0x0000, 0x0000, 0x0002, 0x0002,
	    /* < */ 0x0010, 0x0008, 0x0004, 0x0002, 0x0004, 0x0008, 0x0010,
	    /* = */ 0x003E, 0x0000, 0x003E,
	    /* > */ 0x0002, 0x0004, 0x0008, 0x0010, 0x0008, 0x0004, 0x0002,
	    /* ? */ 0x001C, 0x0022, 0x0020, 0x0020, 0x0010, 0x0008, 0x0008, 0x0000, 0x0008,
	    /* @ */ 0x00F0, 0x0108, 0x0204, 0x04E2, 0x0492, 0x0492, 0x0762, 0x0004, 0x0008, 0x01F0,
	    /* A */ 0x0010, 0x0010, 0x0028, 0x0028, 0x0044, 0x0044, 0x007C, 0x0082, 0x0082,
	    /* B */ 0x001E, 0x0022, 0x0022, 0x0022, 0x001E, 0x0022, 0x0022, 0x0022, 0x001E,
	    /* C */ 0x003C, 0x0042, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0042, 0x003C,
	    /* D */ 0x001E, 0x0022, 0x0042, 0x0042, 0x0042, 0x0042, 0x0042, 0x0022, 0x001E,
	    /* E */ 0x003E, 0x0002, 0x0002, 0x0002, 0x001E, 0x0002, 0x0002, 0x0002, 0x003E,
	    /* F */ 0x003E, 0x0002, 0x0002, 0x0002, 0x001E, 0x0002, 0x0002, 0x0002, 0x0002,
	    /* G */ 0x003C, 0x0042, 0x0002, 0x0002, 0x0072, 0x0042, 0x0042, 0x0062, 0x005C,
	    /* H */ 0x0042, 0x0042, 0x0042, 0x0042, 0x007E, 0x0042, 0x0042, 0x0042, 0x0042,
	    /* I */ 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002,
	    /* J */ 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0012, 0x0012, 0x000C,
	    /* K */ 0x0022, 0x0012, 0x000A, 0x0006, 0x0006, 0x000A, 0x0012, 0x0022, 0x0042,
	    /* L */ 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x003E,
	    /* M */ 0x0082, 0x0082, 0x00C6, 0x00C6, 0x00AA, 0x00AA, 0x0092, 0x0092, 0x0082,
	    /* N */ 0x0042, 0x0046, 0x0046, 0x004A, 0x004A, 0x0052, 0x0062, 0x0062, 0x0042,
	    /* O */ 0x003C, 0x0042, 0x0042, 0x0042, 0x0042, 0x0042, 0x0042, 0x0042, 0x003C,
	    /* P */ 0x003E, 0x0042, 0x0042, 0x0042, 0x003E, 0x0002, 0x0002, 0x0002, 0x0002,
	    /* Q */ 0x003C, 0x0042, 0x0042, 0x0042, 0x0042, 0x0042, 0x0052, 0x0062, 0x003C,
	    /* R */ 0x003E, 0x0042, 0x0042, 0x0042, 0x003E, 0x0042, 0x0042, 0x0042, 0x0042,
	    /* S */ 0x001C, 0x0022, 0x0002, 0x0002, 0x001C, 0x0020, 0x0020, 0x0022, 0x001C,
	    /* T */ 0x003E, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
	    /* U */ 0x0042, 0x0042, 0x0042, 0x0042, 0x0042, 0x0042, 0x0042, 0x0042, 0x003C,
	    /* V */ 0x0082, 0x0082, 0x0044, 0x0044, 0x0044, 0x0028, 0x0028, 0x0010, 0x0010,
	    /* W */ 0x0802, 0x0802, 0x0444, 0x0444, 0x0444, 0x02A8, 0x02A8, 0x0110, 0x0110,
	    /* X */ 0x0082, 0x0082, 0x0044, 0x0028, 0x0010, 0x0028, 0x0044, 0x0082, 0x0082,
	    /* Y */ 0x0082, 0x0082, 0x0044, 0x0028, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010,
	    /* Z */ 0x00FE, 0x0080, 0x0040, 0x0020, 0x0010, 0x0008, 0x0004, 0x0002, 0x00FE,
	    /* [ */ 0x0006, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0006,
	    /* \ */ 0x0002, 0x0002, 0x0004, 0x0004, 0x0008, 0x0008, 0x0010, 0x0010,
	    /* ] */ 0x0006, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0006,
	    /* ^ */ 0x0008, 0x0014, 0x0022,
	    /* _ */ 0x007E,
	    /* ` */ 0x0002, 0x0004,
	    /* a */ 0x001C, 0x0020, 0x003C, 0x0022, 0x0022, 0x003C,
	    /* b */ 0x0002, 0x0002, 0x0002, 0x001E, 0x0022, 0x0022, 0x0022, 0x0022, 0x001E,
	    /* c */ 0x001C, 0x0022, 0x0002, 0x0002, 0x0022, 0x001C,
	    /* d */ 0x0020, 0x0020, 0x0020, 0x003C, 0x0022, 0x0022, 0x0022, 0x0022, 0x003C,
	    /* e */ 0x001C, 0x0022, 0x003E, 0x0002, 0x0022, 0x001C,
	    /* f */ 0x0004, 0x0002, 0x0002, 0x0006, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002,
	    /* g */ 0x003C, 0x0022, 0x0022, 0x0022, 0x0022, 0x003C, 0x0020, 0x001E,
	    /* h */ 0x0002, 0x0002, 0x0002, 0x001A, 0x0026, 0x0022, 0x0022, 0x0022, 0x0022,
	    /* i */ 0x0002, 0x0000, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002,
	    /* j */ 0x0002, 0x0000, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002,
	    /* k */ 0x0002, 0x0002, 0x0002, 0x0012, 0x000A, 0x0006, 0x000A, 0x0012, 0x0022,
	    /* l */ 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002,
	    /* m */ 0x006E, 0x0092, 0x0092, 0x0092, 0x0092, 0x0092,
	    /* n */ 0x001A, 0x0026, 0x0022, 0x0022, 0x0022, 0x0022,
	    /* o */ 0x001C, 0x0022, 0x0022, 0x0022, 0x0022, 0x001C,
	    /* p */ 0x001E, 0x0022, 0x0022, 0x0022, 0x0022, 0x001E, 0x0002, 0x0002,
	    /* q */ 0x003C, 0x0022, 0x0022, 0x0022, 0x0022, 0x003C, 0x0020, 0x0020,
	    /* r */ 0x0006, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002,
	    /* s */ 0x000C, 0x0012, 0x0004, 0x0008, 0x0012, 0x000C,
	    /* t */ 0x0002, 0x0002, 0x0006, 0x0002, 0x0002, 0x0002, 0x0002, 0x0004,
	    /* u */ 0x0022, 0x0022, 0x0022, 0x0022, 0x0032, 0x002C,
	    /* v */ 0x0022, 0x0022, 0x0014, 0x0014, 0x0008, 0x0008,
	    /* w */ 0x0092, 0x0092, 0x00AA, 0x00AA, 0x0044, 0x0044,
	    /* x */ 0x0012, 0x0012, 0x000C, 0x000C, 0x0012, 0x0012,
	    /* y */ 0x0012, 0x0012, 0x0012, 0x0012, 0x000C, 0x0004, 0x0004, 0x0003,
	    /* z */ 0x001E, 0x0010, 0x0008, 0x0004, 0x0002, 0x001E,
	    /* { */ 0x0008, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008,
	    /* | */ 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002,
	    /* } */ 0x0002, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002,
	    /* ~ */ 0x004C, 0x0032,
	};

	static Font ToGenericFont()
	{
		return {CHARACTERS_LENGTH, DATA_LENGTH, CHARACTERS, DATA, LINE_HEIGHT, SPACE_WIDTH, TAB_WIDTH};
	}
};

constexpr Character Font95::CHARACTERS[Font95::CHARACTERS_LENGTH]; // C++ weird corners (tldr: link problems)
constexpr uint16_t Font95::DATA[Font95::DATA_LENGTH];              // Ditto


class Citrink
{
	// Citrink Palette
	// https://lospec.com/palette-list/citrink
	// by Inkpendude (@inkpendude)

  public:
	static constexpr size_t LENGTH = 8;

	static constexpr Colour COLOURS[LENGTH] = {
	    {0x20, 0x15, 0x33, 0xFF}, {0x25, 0x24, 0x46, 0xFF}, {0x25, 0x4D, 0x70, 0xFF}, {0x16, 0x6E, 0x7A, 0xFF},
	    {0x52, 0xC3, 0x3F, 0xFF}, {0xB2, 0xD9, 0x42, 0xFF}, {0xFC, 0xF6, 0x60, 0xFF}, {0xFF, 0xFF, 0xFF, 0xFF}};

	static Palette ToGenericPalette()
	{
		return {LENGTH, COLOURS};
	}
};

constexpr Colour Citrink::COLOURS[Citrink::LENGTH];


class Slso8
{
	// SLSO8 Palette
	// https://lospec.com/palette-list/slso8
	// by Luis Miguel Maldonado

  public:
	static constexpr size_t LENGTH = 8;

	static constexpr Colour COLOURS[LENGTH] = {
	    {0x0D, 0x2B, 0x45, 0xFF}, {0x20, 0x3C, 0x56, 0xFF}, {0x54, 0x4E, 0x68, 0xFF}, {0x8D, 0x69, 0x7A, 0xFF},
	    {0xD0, 0x81, 0x59, 0xFF}, {0xFF, 0xAA, 0x5E, 0xFF}, {0xFF, 0xD4, 0xA3, 0xFF}, {0xFF, 0xEC, 0xD6, 0xFF}};

	static Palette ToGenericPalette()
	{
		return {LENGTH, COLOURS};
	}
};

constexpr Colour Slso8::COLOURS[Slso8::LENGTH];


class Sunraze
{
	// Sunraze Palette
	// https://lospec.com/palette-list/sunraze
	// by Dain Kaplan

  public:
	static constexpr size_t LENGTH = 14;

	static constexpr Colour COLOURS[LENGTH] = {
	    {0x27, 0x03, 0x2A, 0xFF}, {0x4B, 0x08, 0x3D, 0xFF}, {0x73, 0x11, 0x44, 0xFF}, {0x89, 0x0C, 0x38, 0xFF},
	    {0xAB, 0x0A, 0x2A, 0xFF}, {0xBE, 0x20, 0x28, 0xFF}, {0xCF, 0x49, 0x2C, 0xFF}, {0xE3, 0x64, 0x33, 0xFF},
	    {0xE3, 0x88, 0x4E, 0xFF}, {0xEC, 0xB5, 0x5F, 0xFF}, {0xEE, 0xD6, 0x7B, 0xFF}, {0xF4, 0xEF, 0xAE, 0xFF},
	    {0xFF, 0xDD, 0xD9, 0xFF}, {0xFB, 0xFB, 0xF2, 0xFF}};

	static Palette ToGenericPalette()
	{
		return {LENGTH, COLOURS};
	}
};

constexpr Colour Sunraze::COLOURS[Sunraze::LENGTH];

#endif
